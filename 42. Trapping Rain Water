Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.


The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. Thanks Marcos for contributing this image!

Example:

Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6


solution :

class Solution {
public:
    int trap(vector<int>& height)
    {
       
       int num=0;
        cac(num,0,height.size()-1,height);
        return num;
    }
    
    void cac(int & num,int maxl,int maxr,vector<int>& height)          //计算maxl到maxr间的雨滴数
    {
        if(maxl>=maxr) 
            return ;
        int mid;                                                       //找到最高的
        mid=findhigh(maxl,maxr,height);
        int midleft,midright;
        if(mid!=maxl)                                                   //最高的不在最左边，在左边找次高的，并算出总雨量
        {
            midleft=findhigh(maxl,mid-1,height);
            cac(num,0,midleft,height);
             num+=(mid-midleft-1)*height[midleft];
             for(int i=midleft+1;i<mid;i++)
            num-=height[i];
        }
        if(mid!=maxr)                                                     //最高的不在最右边，在右边找次高的，并算出总雨量
        {    
          midright=findhigh(mid+1,maxr,height);
          cac(num,midright,height.size()-1,height);
             num+=(midright-mid-1)*height[midright];
             for(int i=mid+1;i<midright;i++)
            num-=height[i];        
        }
        
    }
    

    int findhigh(int maxl,int maxr,vector<int>& height)
    {
        int i;
        int max=maxl;
        for(i=maxl;i<=maxr;i++)
        {
            if(height[max]<height[i])
                max=i;
        }
        return max;
    }
    

};
