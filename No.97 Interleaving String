//Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.

//first solution 

        if(s1.size()==0&&s2.size()==0&&s3.size()==0)
        return true;
        if(s3.size()!=s2.size()+s1.size())
        return false;
        if(s1.size()==0)
        {
            if(s2==s3)
            return true;
            return false;
        }
        if(s2.size()==0)
        {
            if(s1==s3)
            return true;
            return false;
        }
        if(s1[0]!=s3[0]&&s2[0]!=s3[0])
        return false;
        bool l1=false,l2=false;
        string t1,t2,ss1,ss2;
        t1=s3;
        t2=s3;
        ss1=s1;
        ss2=s2;
        if(ss1[0]==t1[0])
        {
            ss1.erase(ss1.begin());
            t1.erase(t1.begin());
            l1=isInterleave(ss1,s2,t1);
        }
        if(ss2[0]==t2[0])
        {
            ss2.erase(ss2.begin());
            t2.erase(t2.begin());
            l2=isInterleave(s1,ss2,t2);
        }
        if(l1||l2)
        return true;
       return false; 
       
       
 //last solution 
 
 
         if(s1.size()+s2.size()!=s3.size())
         return false;
         bool table[s1.size()+1][s2.size()+1];
         //table[0][0]=true;
         for(int i=0;i<=s1.size();i++)
         {
             for(int j=0;j<=s2.size();j++)
             {
                 if(i==0&&j==0)
                 table[0][0]=true;
                 else if(j==0)
                 table[i][j]=(table[i-1][j])&&(s1[i-1]==s3[i+j-1]);
                 else if(i==0)
                 table[i][j]=(table[i][j-1])&&(s2[j-1]==s3[i+j-1]);
                 else
                 table[i][j]=((table[i-1][j])&&(s1[i-1]==s3[i+j-1]))||(table[i][j-1])&&(s2[j-1]==s3[j+i-1]);
             }
         }
         return table[s1.size()][s2.size()];

